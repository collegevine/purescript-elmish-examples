version: 2.1

jobs:
  build:
    working_directory: ~/elmish-examples

    docker:
    - image: circleci/node:10.15.3-stretch

    parallelism: 1

    steps:
    - install-libsysconfcpus
    - checkout: { path: "~/elmish-examples" }

    # TODO: build these in parallel. Couldn't figure out how to do it except to
    # split into separate jobs, which is too much typing
    - build-example: { directory: counter }
    - build-example: { directory: html-hello-world }

commands:
  build-example:
    parameters:
      directory: { type: "string" }
    steps:
      - restore_cache:
          keys:
            - elmish-examples-<< parameters.directory >>-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "packages.dhall" }}
            - elmish-examples-<< parameters.directory >>-{{ .Branch }}-

      - run: cd "~/elmish-examples/<< parameters.directory >>" && npm install && sysconfcpus -n 2 npm run build

      - save_cache:
          key: elmish-examples-<< parameters.directory >>-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "packages.dhall" }}
          paths:
            - << parameters.directory >>/.spago
            - << parameters.directory >>/node_modules
            - << parameters.directory >>/output

  # Compilers such as `purs` (and Elm) try to leverage maximum parallelism by running on all
  # available CPUs. Unfortunately, CircleCI reports the number of host OS CPUs instead of the number
  # of available ones in our container. We use `libsysconfcpus` to limit the number of CPUs tools
  # such as `purs` will utilize, to optimize our build time. See:
  # https://github.com/elm/compiler/issues/1473
  install-libsysconfcpus:
    steps:
      - restore_cache:
          keys:
            - libsysconfcpus-{{ .Branch }}
            - libsysconfcpus-master
      - run:
          name: Build sysconfcpus
          command: >
            if [ ! -d ~/libsysconfcpus ]; then
              cd ~;
              buildDir=pwd;
              git clone https://github.com/obmarg/libsysconfcpus.git;
              cd libsysconfcpus;
              git checkout 8cb9da6602;
              ./configure;
              sudo make;
            fi
      - save_cache:
          key: libsysconfcpus-{{ .Branch }}
          paths:
            - ~/libsysconfcpus
      - run:
          name: Install sysconfcpus
          command: >
            cd ~/libsysconfcpus;
            sudo make install;
